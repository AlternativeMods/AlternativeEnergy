buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

apply plugin: 'scala'
apply plugin: 'forge'

def jenkins = System.env.JENKINS_URL != null

group = 'alternativemods.alteng'
version = '1.3-SNAPSHOT'

minecraft{
    assetDir = "runtime/client/assets"
    version = '1.7.2-10.12.1.1060'
}

repositories {
    maven {
        url 'http://maven.reening.nl'
    }
}

configurations {
    packed
    included
    compile.extendsFrom packed
    compile.extendsFrom included
}

dependencies {
    /*compile 'org.projectlombok:lombok:1.12.2'
    compile 'jds.bibliocraft:BiblioCraft:1.5.3'
    compile 'gregtechmod:GregTechAPI:4.05j'
    compile 'buildcraft:BuildCraftAPI:1.0'
    compile 'ic2:IC2Api:1.0'
    compile 'computercraft:ComputerCraftAPI:1.0'
	compile 'com.teamcofh:CofhCore:b11b'*/

    packed 'jk_5.commons:CommonsConfig:0.1'
    runtime 'com.googlecode.efficient-java-matrix-library:ejml:0.23' //For IC2 compat

    compile 'com.mod-buildcraft:buildcraft:5.0.4.+:dev'
    //compile 'codechicken:ForgeMultipart:1.7.2-1.1.0.268:dev'
    //compile 'codechicken:CodeChickenLib:1.7.2-1.1.0.72:dev'

    testCompile 'junit:junit:4.11'
}

jar {
    from {
        configurations.packed.collect {
            it.isDirectory() ? it : zipTree(it).matching {
                exclude "META-INF", "META-INF/**", "*META-INF*", "meta-inf"
                exclude "**.jar", "**/*.jar", "*.jar"
            }
        }
        //Maybe a bit ugly, but meh
        configurations.included.collect {
            fileTree(it).matching {
                include "**CommonsConfig-0.1.jar"
            }
        }
    }
    manifest {
        //attributes "FMLCorePlugin": "alternativemods.alteng.coremod.AltEngCoremod"
        //attributes "FMLCorePluginContainsFMLMod": "true"
    }
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        include 'version.properties'
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
        exclude 'version.properties'
    }
}

if(jenkins){
    //Don't fail the build on failed tests on jenkins. Jenkins will mark it as unstable then
    test.ignoreFailures = true
}
